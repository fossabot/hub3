Query ::= Prologue ( SelectQuery | ConstructQuery | DescribeQuery | AskQuery )
Prologue ::= BaseDecl? PrefixDecl*
BaseDecl ::= 'BASE' IRI_REF
PrefixDecl ::= 'PREFIX' PNAME_NS NAMESPACE_REF
SelectQuery ::= 'SELECT' Distinctness? ( Var+ | '*' ) DatasetClause* WhereClause SolutionModifier
      Distinctness ::= 'DISTINCT' | 'REDUCED'
ConstructQuery ::= 'CONSTRUCT' ConstructTemplate DatasetClause* WhereClause SolutionModifier
DescribeQuery ::= 'DESCRIBE' ( VarOrIRIref+ | '*' ) DatasetClause* WhereClause? SolutionModifier
AskQuery ::= 'ASK' DatasetClause* WhereClause
DatasetClause ::= 'FROM' ( DefaultGraphClause | NamedGraphClause )
DefaultGraphClause ::= SourceSelector
NamedGraphClause ::= 'NAMED' SourceSelector
SourceSelector ::= IRIref
WhereClause ::= 'WHERE'? GroupGraphPattern
SolutionModifier ::= OrderClause? LimitOffsetClauses?
LimitOffsetClauses ::= ( ( LimitClause OffsetClause?) | (OffsetClause LimitClause?) )
OrderClause ::= 'ORDER' 'BY' OrderCondition+
OrderCondition ::= ( OrderDirection BrackettedExpression ) | Constraint | Var
       OrderDirection ::= 'ASC' | 'DESC'
LimitClause ::= 'LIMIT' INTEGER
OffsetClause ::= 'OFFSET' INTEGER
GroupGraphPattern ::= '{' InitialGroupGraphPattern* TriplesBlock? '}'
       InitialGroupGraphPattern ::= TriplesBlock? ( GraphPatternNotTriples | Filter ) '.'?
TriplesBlock ::= TriplesSameSubject ( '.' TriplesBlock? )?
GraphPatternNotTriples ::= OptionalGraphPattern | GroupOrUnionGraphPattern | GraphGraphPattern
OptionalGraphPattern ::= 'OPTIONAL' GroupGraphPattern
GraphGraphPattern ::= 'GRAPH' VarOrIRIref GroupGraphPattern
GroupOrUnionGraphPattern ::= GroupGraphPattern ( 'UNION' GroupGraphPattern )*
Filter ::= 'FILTER' Constraint
Constraint ::= BrackettedExpression | BuiltInCall | FunctionCall
FunctionCall ::= IRIref ArgList
ArgList ::= ( NILLIST | ( '(' Expression ( ',' Expression )* ')' )  )
ConstructTemplate ::= '{' ConstructTriples? '}'
ConstructTriples ::= TriplesSameSubject ( '.' ConstructTriples? )?
TriplesSameSubject ::= ( VarOrTerm PropertyListNotEmpty ) | ( TriplesNode PropertyList )
PropertyListNotEmpty ::= VerbObjectList ( ';' VerbObjectList? )* 
       VerbObjectList ::= Verb ObjectList
PropertyList ::= PropertyListNotEmpty?
ObjectList ::= Object ( ',' Object )*
Object ::= GraphNode
Verb ::= VarOrIRIref | 'a'
TriplesNode ::= Collection | BlankNodePropertyList
BlankNodePropertyList ::= '[' PropertyListNotEmpty ']'
Collection ::= '(' GraphNode+ ')'
GraphNode ::= VarOrTerm | TriplesNode
VarOrTerm ::= Var | GraphTerm
VarOrIRIref ::= Var | IRIref
Var ::= VAR1 | VAR2
GraphTerm ::= IRIref | RDFLiteral | NumericLiteral | BooleanLiteral | BlankNode | NILLIST
Expression ::= ConditionalOrExpression
ConditionalOrExpression ::= ConditionalAndExpression ( '||' ConditionalAndExpression )*
ConditionalAndExpression ::= ValueLogical ( '&&' ValueLogical )*
ValueLogical ::= RelationalExpression
RelationalExpression ::= NumericExpression RelatedNumeric ?
       RelationalOperator ::= '=' | '!=' | '<' | '>' | '<=' | '>='
       RelatedNumeric ::= RelationalOperator NumericExpression
NumericExpression ::= AdditiveExpression
AdditiveExpression ::= MultiplicativeExpression AddedMultiplicative *
       AdditiveOperator ::= '+' | '-'
       AddedMultiplicative :: AdditiveOperator MultiplicativeExpression
       //  | NumericLiteralPositive | NumericLiteralNegative already appear through primary expression
MultiplicativeExpression ::= UnaryExpression MultipliedUnary*
       MultiplicativeOperator ::= '*' | '/'
       MultipliedUnary ::= MultiplicativeOperator UnaryExpression
UnaryExpression ::= ( UnaryOperator PrimaryExpression ) | PrimaryExpression
       UnaryOperator ::= '!' | '+' | '-'
PrimaryExpression ::= BrackettedExpression | BuiltInCall | IRIrefOrFunction | RDFLiteral | NumericLiteral | BooleanLiteral | Var
BrackettedExpression ::= '(' Expression ')'
BuiltInCall ::= BuiltinBinaryCall | BuiltinUnaryCall | RegexExpression
BuiltinUnaryCall ::= BuiltinUnaryOperator '(' Expression ')'
BuiltinUnaryOperator ::= 'STR' | 'LANG' | 'LANGMATCHES' | 'DATATYPE' | 'BOUND' | 'isIRI' | 'isURI' | 'isBLANK' | 'isLITERAL'
BuiltinBinaryCall ::= BuiltinBinaryOperator '(' Expression ',' Expression ')'
BuiltinBinaryOperator ::= 'LANGMATCHES' | 'sameTerm'
RegexExpression ::= 'REGEX' '(' Expression ',' Expression ( ',' Expression )? ')'
IRIrefOrFunction ::= IRIref ArgList?
RDFLiteral ::= String ( LANGTAG | ( '^^' IRIref ) )?
NumericLiteral ::= NumericLiteralUnsigned | NumericLiteralPositive | NumericLiteralNegative
NumericLiteralUnsigned ::= INTEGER | DECIMAL | DOUBLE
NumericLiteralPositive ::= INTEGER_POSITIVE | DECIMAL_POSITIVE | DOUBLE_POSITIVE
NumericLiteralNegative ::= INTEGER_NEGATIVE | DECIMAL_NEGATIVE | DOUBLE_NEGATIVE
BooleanLiteral ::= 'true' | 'false'
String ::= STRING_LITERAL1 | STRING_LITERAL2 | STRING_LITERAL_LONG1 | STRING_LITERAL_LONG2
IRIref ::= IRI_REF | PrefixedName
PrefixedName ::= PNAME_LN | PNAME_NS
BlankNode ::= BLANK_NODE_LABEL | ANON
// IRI_REF ::= '<' ([^<>"{}|^`\]-[#x00-#x20])* '>'
IRI_REF ::= '<' IRI_NAMESTRING '>'
NAMESPACE_REF ::= '<' IRI_NAMESTRING '>'
PNAME_NS ::= PN_PREFIX? ':'
PNAME_LN ::= PNAME_NS PN_LOCAL
BLANK_NODE_LABEL ::= '_:' PN_LOCAL
VAR1 ::= '?' VARNAME
VAR2 ::= '$' VARNAME
// LANGTAG ::= '@' [a-zA-Z]+ ('-' [a-zA-Z0-9]+)*
// INTEGER ::= [0-9]+
// DECIMAL ::= [0-9]+ '.' [0-9]* | '.' [0-9]+
// DOUBLE ::= [0-9]+ '.' [0-9]* EXPONENT | '.' ([0-9])+ EXPONENT | ([0-9])+ EXPONENT
// INTEGER_POSITIVE ::= '+' INTEGER
// DECIMAL_POSITIVE ::= '+' DECIMAL
// DOUBLE_POSITIVE ::= '+' DOUBLE
// INTEGER_NEGATIVE ::= '-' INTEGER
// DECIMAL_NEGATIVE ::= '-' DECIMAL
// DOUBLE_NEGATIVE ::= '-' DOUBLE
// EXPONENT ::= [eE] [+-]? [0-9]+
// STRING_LITERAL1 ::= "'" ( ([^#x27#x5C#xA#xD]) | ECHAR )* "'"
// STRING_LITERAL2 ::= '"' ( ([^#x22#x5C#xA#xD]) | ECHAR )* '"'
// STRING_LITERAL_LONG1 ::= "'''" ( ( "'" | "''" )? ( [^'\] | ECHAR ) )* "'''"
// STRING_LITERAL_LONG2 ::= '"""' ( ( '"' | '""' )? ( [^"\] | ECHAR ) )* '"""'
// ECHAR ::= '\' [tbnrf\"']
NILLIST ::= '('  ')'
// WS ::= #x20 | #x9 | #xD | #xA
ANON ::= '['  ']'
// PN_CHARS_BASE ::= [A-Z] | [a-z] | [#x00C0-#x00D6] | [#x00D8-#x00F6] | [#x00F8-#x02FF] | [#x0370-#x037D] | [#x037F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
// PN_CHARS_U ::= PN_CHARS_BASE | '_'
// VARNAME ::= ( PN_CHARS_U | [0-9] ) ( PN_CHARS_U | [0-9] | #x00B7 | [#x0300-#x036F] | [#x203F-#x2040] )*
// PN_CHARS ::= PN_CHARS_U | '-' | [0-9] | #x00B7 | [#x0300-#x036F] | [#x203F-#x2040]
// PN_PREFIX ::= PN_CHARS_BASE ((PN_CHARS|'.')* PN_CHARS)?
// [[100]] PN_LOCAL ::= ( PN_CHARS_U | [0-9] ) ((PN_CHARS|'.')* PN_CHARS)?
